digraph "classes" {
rankdir=BT
charset="utf-8"
"src.alpha_beta_Kopie.AlphaBetaSearch" [color="black", fontcolor="black", label=<{AlphaBetaSearch|best_move : NoneType, list<br ALIGN="LEFT"/>bitboards<br ALIGN="LEFT"/>eval_func<br ALIGN="LEFT"/>eval_func_opponent<br ALIGN="LEFT"/>game<br ALIGN="LEFT"/>move_gen<br ALIGN="LEFT"/>opponent : int<br ALIGN="LEFT"/>player<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>time_limit : int<br ALIGN="LEFT"/>total_move_count : int<br ALIGN="LEFT"/>total_time<br ALIGN="LEFT"/>transposition_table<br ALIGN="LEFT"/>turn : bool<br ALIGN="LEFT"/>zobrist<br ALIGN="LEFT"/>|alpha_beta_max(alpha, beta, depth_left, bitboards, age)<br ALIGN="LEFT"/>alpha_beta_min(alpha, beta, depth_left, bitboards, age)<br ALIGN="LEFT"/>count_pieces(fen_string)<br ALIGN="LEFT"/>is_time_exceeded()<br ALIGN="LEFT"/>random_move(opening)<br ALIGN="LEFT"/>search(iterative_deepening, time_limit, depth)<br ALIGN="LEFT"/>set_time(board)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.Benchmarktest2_func.Benchmarktest2_Func" [color="black", fontcolor="black", label=<{Benchmarktest2_Func|_S : StringIO<br ALIGN="LEFT"/>_SAVE_PATH : str<br ALIGN="LEFT"/>global_profiler : Profile<br ALIGN="LEFT"/>|benchPrint(filename: str, sortby: SortKey)<br ALIGN="LEFT"/>profile(repeat)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.model.BoardCommand" [color="black", fontcolor="black", label=<{BoardCommand|Cannot_Move : int<br ALIGN="LEFT"/>Degrade_Blue_KnightOnTarget : int<br ALIGN="LEFT"/>Degrade_Red_KnightOnTarget : int<br ALIGN="LEFT"/>Delete_Blue_Knight_from_StartPos : int<br ALIGN="LEFT"/>Delete_Blue_Pawn_from_StartPos : int<br ALIGN="LEFT"/>Delete_Red_Knight_from_StartPos : int<br ALIGN="LEFT"/>Delete_Red_Pawn_from_StartPos : int<br ALIGN="LEFT"/>Hit_Blue_KnightOnTarget : int<br ALIGN="LEFT"/>Hit_Blue_PawnOnTarget : int<br ALIGN="LEFT"/>Hit_Red_KnightOnTarget : int<br ALIGN="LEFT"/>Hit_Red_PawnOnTarget : int<br ALIGN="LEFT"/>Move_Blue_Knight_no_Change : int<br ALIGN="LEFT"/>Move_Blue_Pawn_no_Change : int<br ALIGN="LEFT"/>Move_Red_Knight_no_Change : int<br ALIGN="LEFT"/>Move_Red_Pawn_no_Change : int<br ALIGN="LEFT"/>Upgrade_Blue_KnightOnTarget : int<br ALIGN="LEFT"/>Upgrade_Red_KnightOnTarget : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.model.Config" [color="black", fontcolor="black", label=<{Config|BLOCKED_FIGURES : str<br ALIGN="LEFT"/>CONFIGVERSION : str<br ALIGN="LEFT"/>ENDGAME_MAT_KNIGHT : str<br ALIGN="LEFT"/>ENDGAME_MAT_PAWN : str<br ALIGN="LEFT"/>MAT_KNIGHT : str<br ALIGN="LEFT"/>MAT_PAWN : str<br ALIGN="LEFT"/>MOBILITY : str<br ALIGN="LEFT"/>MaxPlayer : str<br ALIGN="LEFT"/>PIECESQUARE_TABLE_KNIGHT_Blue : str<br ALIGN="LEFT"/>PIECESQUARE_TABLE_KNIGHT_Red : str<br ALIGN="LEFT"/>PIECESQUARE_TABLE_PAWN_Blue : str<br ALIGN="LEFT"/>PIECESQUARE_TABLE_PAWN_Red : str<br ALIGN="LEFT"/>PROTECTION_KNIGHTS : str<br ALIGN="LEFT"/>PROTECTION_PAWNS : str<br ALIGN="LEFT"/>Player : str<br ALIGN="LEFT"/>TOTAL_SCORE_RATING_KNIGHT_BLUE : str<br ALIGN="LEFT"/>TOTAL_SCORE_RATING_KNIGHT_RED : str<br ALIGN="LEFT"/>TOTAL_SCORE_RATING_PAWN_BLUE : str<br ALIGN="LEFT"/>TOTAL_SCORE_RATING_PAWN_RED : str<br ALIGN="LEFT"/>TURN_OPTIONS : str<br ALIGN="LEFT"/>UNPROTECTED_KNIGHTS : str<br ALIGN="LEFT"/>UNPROTECTED_PAWNS : str<br ALIGN="LEFT"/>UPGRADE_TO_KNIGHT : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.model.DictMoveEntry" [color="black", fontcolor="black", label=<{DictMoveEntry|BLUE_KNIGHT_LEFT : int<br ALIGN="LEFT"/>BLUE_KNIGHT_RIGHT : int<br ALIGN="LEFT"/>BLUE_KNIGHT_TO_TOPLEFT : int<br ALIGN="LEFT"/>BLUE_KNIGHT_TO_TOPRIGHT : int<br ALIGN="LEFT"/>BLUE_PAWN_TO_TOP : int<br ALIGN="LEFT"/>BLUE_PAWN_TO_TOP_LEFT : int<br ALIGN="LEFT"/>BLUE_PAWN_TO_TOP_RIGHT : int<br ALIGN="LEFT"/>CONTINUE_GAME : int<br ALIGN="LEFT"/>GAME_OVER_BLUE_WINS : int<br ALIGN="LEFT"/>GAME_OVER_RED_WINS : int<br ALIGN="LEFT"/>PAWN_TO_LEFT : int<br ALIGN="LEFT"/>PAWN_TO_RIGHT : int<br ALIGN="LEFT"/>RED_KNIGHT_LEFT : int<br ALIGN="LEFT"/>RED_KNIGHT_RIGHT : int<br ALIGN="LEFT"/>RED_KNIGHT_TO_BOTLEFT : int<br ALIGN="LEFT"/>RED_KNIGHT_TO_BOTRIGHT : int<br ALIGN="LEFT"/>RED_PAWN_TO_BOTTOM : int<br ALIGN="LEFT"/>RED_PAWN_TO_BOTTOM_LEFT : int<br ALIGN="LEFT"/>RED_PAWN_TO_BOTTOM_RIGHT : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.alt_eval.EvalFunction" [color="black", fontcolor="black", label=<{EvalFunction|_CONFIG_DICT : dict<br ALIGN="LEFT"/>|_computeActualPositionalPoints(bitboards)<br ALIGN="LEFT"/>_materialPoints(bitboards)<br ALIGN="LEFT"/>computeEvaluationScore(bitboards): int<br ALIGN="LEFT"/>sortMoveList(player: Player, moveList, moveGen: MoveGenerator, board: list[np.uint64]): list[tuple[int, int, BoardCommand, int]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.alt_eval.EvalFunction_Alt" [color="black", fontcolor="black", label=<{EvalFunction_Alt|_CONFIG_DICT : dict<br ALIGN="LEFT"/>|_computeActualPositionalPoints(bitboards)<br ALIGN="LEFT"/>_materialPoints(bitboards)<br ALIGN="LEFT"/>computeEvaluationScore(bitboards): int<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.model.FilteredPositionsArray" [color="black", fontcolor="black", label=<{FilteredPositionsArray|<br ALIGN="LEFT"/>|append(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.model.GameServerModel" [color="black", fontcolor="black", label=<{GameServerModel|CURRENT_PLAYER_STRING : int<br ALIGN="LEFT"/>FEN_BOARD : int<br ALIGN="LEFT"/>PLAYER1 : int<br ALIGN="LEFT"/>PLAYER2 : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.gamestate.GameState" [color="black", fontcolor="black", label=<{GameState|BITBOARD<br ALIGN="LEFT"/>_ARR_INDEX_B : int<br ALIGN="LEFT"/>_ARR_INDEX_BB : int<br ALIGN="LEFT"/>_ARR_INDEX_BR : int<br ALIGN="LEFT"/>_ARR_INDEX_R : int<br ALIGN="LEFT"/>_ARR_INDEX_RB : int<br ALIGN="LEFT"/>_ARR_INDEX_RR : int<br ALIGN="LEFT"/>_ZARR_INDEX_B_KNIGHTS : int<br ALIGN="LEFT"/>_ZARR_INDEX_B_PAWNS : int<br ALIGN="LEFT"/>_ZARR_INDEX_R_KNIGHTS : int<br ALIGN="LEFT"/>_ZARR_INDEX_R_PAWNS : int<br ALIGN="LEFT"/>figureStack : dict<br ALIGN="LEFT"/>|createBitBoardFrom(matrix, mode)<br ALIGN="LEFT"/>createBitBoardFromFEN(fen: str)<br ALIGN="LEFT"/>fromBitBoardToMatrix(BB: list, mode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.gui.Gui" [color="black", fontcolor="black", label=<{Gui|BREITE : int<br ALIGN="LEFT"/>FELDER : int<br ALIGN="LEFT"/>HÃ–HE : int<br ALIGN="LEFT"/>SCHRIFTART : Font<br ALIGN="LEFT"/>__BACKGROUND : tuple<br ALIGN="LEFT"/>__BLAU : tuple<br ALIGN="LEFT"/>__DARKBLUE : tuple<br ALIGN="LEFT"/>__DARKRED : tuple<br ALIGN="LEFT"/>__ROT : tuple<br ALIGN="LEFT"/>__SCHWARZ : tuple<br ALIGN="LEFT"/>__WEISS : tuple<br ALIGN="LEFT"/>fen<br ALIGN="LEFT"/>screen<br ALIGN="LEFT"/>|checkFen()<br ALIGN="LEFT"/>fenToMatrix(fen: str)<br ALIGN="LEFT"/>mapColorToValue()<br ALIGN="LEFT"/>mapValueToColor(value: int)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>updateGUI(FEN)<br ALIGN="LEFT"/>zeichneFigur(x, y, farbe, shift)<br ALIGN="LEFT"/>zeichne_feld(x, y, farbe)<br ALIGN="LEFT"/>zeichne_text(text, x, y, farbe)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.mcts_uct.MCTS" [color="black", fontcolor="black", label=<{MCTS|C<br ALIGN="LEFT"/>_mv<br ALIGN="LEFT"/>currentNode : int<br ALIGN="LEFT"/>player1<br ALIGN="LEFT"/>player2 : int<br ALIGN="LEFT"/>root : int<br ALIGN="LEFT"/>tree : Tree<br ALIGN="LEFT"/>|_1chooseNode(currNode: Node): Node<br ALIGN="LEFT"/>_2generateNodes(nodeId: any): list<br ALIGN="LEFT"/>_3runSimulation(nodeId: any): int<br ALIGN="LEFT"/>_4backPropagation(currentNode: Node, score: float): Node<br ALIGN="LEFT"/>_computeUCTValue(node: Node): float<br ALIGN="LEFT"/>_getBestMove(): tuple<br ALIGN="LEFT"/>_getMaxUCTNode(nodes: list[Node], maxheap: MaxHeapMCTS)<br ALIGN="LEFT"/>doMCTS_v1(timeRemaining: float, timeTolerance: float): tuple<br ALIGN="LEFT"/>printTree(filename: str, showBoard: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.model.MaxHeap" [color="black", fontcolor="black", label=<{MaxHeap|_heap : list<br ALIGN="LEFT"/>|pop()<br ALIGN="LEFT"/>push(mvlist)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.model.MaxHeapMCTS" [color="black", fontcolor="black", label=<{MaxHeapMCTS|_heap : list<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>pop()<br ALIGN="LEFT"/>push(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.moveGenerator_sicher.MoveGenerator" [color="black", fontcolor="black", label=<{MoveGenerator|BITMASK_OPERATIONS : dict<br ALIGN="LEFT"/>_gameover : int<br ALIGN="LEFT"/>_stack : list<br ALIGN="LEFT"/>_useTakeback : bool<br ALIGN="LEFT"/>|_Board_Exec_Move(bitboard: list[np.uint64], infoList: dict[BoardCommand, list], startPos: np.uint64, targetPos: np.uint64, unmake: bool): None<br ALIGN="LEFT"/>_checkTargetPos(player: Player, move: tuple, board: list[np.uint64])<br ALIGN="LEFT"/>_filterPositions(player: Player, positions: np.uint64, bitmask: np.uint64)<br ALIGN="LEFT"/>_genValidatedMoves(player: Player, board: list[np.uint64], gameOver: list[DictMoveEntry]): list[tuple[np.uint64, np.uint64, list[BoardCommand]]]<br ALIGN="LEFT"/>_getAllKnights(player: Player, board: list[np.uint64])<br ALIGN="LEFT"/>_getAllPawns(player: Player, board: list[np.uint64])<br ALIGN="LEFT"/>_getTarget(filteredPos: np.uint64, bitmask: np.uint64)<br ALIGN="LEFT"/>_startPosBelongsToPlayer(player: Player, pos: np.uint64, board: list[np.uint64])<br ALIGN="LEFT"/>checkBoardIfGameOver(gameOver: list[DictMoveEntry], board: list[np.uint64], printBoard)<br ALIGN="LEFT"/>execSingleMove(move: tuple, player: Player, board: list[np.uint64], gameOver: list[DictMoveEntry], printB: bool)<br ALIGN="LEFT"/>genMoves(player: Player, board: list[np.uint64], gameOver: list[DictMoveEntry])<br ALIGN="LEFT"/>getBitPositions(n: np.uint64)<br ALIGN="LEFT"/>isOpening(board: list[np.uint64]): bool<br ALIGN="LEFT"/>prettyPrintBoard(board: list[np.uint64])<br ALIGN="LEFT"/>prettyPrintBoard2(board: list[np.uint64])<br ALIGN="LEFT"/>prettyPrintMove(move: tuple): str<br ALIGN="LEFT"/>prettyPrintMoves(moves: list)<br ALIGN="LEFT"/>takeback(board: list[np.uint64])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.moveLib.MoveLib" [color="black", fontcolor="black", label=<{MoveLib|_bitColDict : dict<br ALIGN="LEFT"/>_coldict : dict<br ALIGN="LEFT"/>bitPosDict : dict<br ALIGN="LEFT"/>|BitsToPosition(value: np.uint64)<br ALIGN="LEFT"/>extractValueFromString(pos: str)<br ALIGN="LEFT"/>mapLetterToNumber(letter: str)<br ALIGN="LEFT"/>mapRowToPowValue()<br ALIGN="LEFT"/>move(start, target, mode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.mcts_uct.NodeData" [color="black", fontcolor="black", label=<{NodeData|board<br ALIGN="LEFT"/>gameOver<br ALIGN="LEFT"/>move : tuple<br ALIGN="LEFT"/>score : int<br ALIGN="LEFT"/>simulations : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.model.Player" [color="black", fontcolor="black", label=<{Player|Blue : int<br ALIGN="LEFT"/>NoOne : int<br ALIGN="LEFT"/>Red : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.scoreConfig_evalFunc.ScoreConfig" [color="black", fontcolor="black", label=<{ScoreConfig|_ALL_FIELDS_IN_BOARD<br ALIGN="LEFT"/>_ZERO_DICT : Counter<br ALIGN="LEFT"/>__REVERSEROW : dict<br ALIGN="LEFT"/>|PsqTMinus(dictFromBetaMinimizer: dict)<br ALIGN="LEFT"/>Version0(maxPlayer: Player, player: Player, board)<br ALIGN="LEFT"/>Version1(maxPlayer: Player, player: Player, board)<br ALIGN="LEFT"/>Version2(maxPlayer: Player, player: Player, board: list[np.uint64])<br ALIGN="LEFT"/>createScores(player: Player, board: list[np.uint64], scoreP: int, scoreK)<br ALIGN="LEFT"/>reversePsqT(dictToReverse: dict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.model.ScoreListForMerging" [color="black", fontcolor="black", label=<{ScoreListForMerging|<br ALIGN="LEFT"/>|append(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.model.ScoredMoveList" [color="black", fontcolor="black", label=<{ScoredMoveList|<br ALIGN="LEFT"/>|append(item)<br ALIGN="LEFT"/>sort()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.alpha_beta_Kopie.TimeExceeded" [color="black", fontcolor="red", label=<{TimeExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.alpha_beta_Kopie.TranspositionTable" [color="black", fontcolor="black", label=<{TranspositionTable|table : dict<br ALIGN="LEFT"/>|lookup(zobrist_key, depth, alpha, beta)<br ALIGN="LEFT"/>store(zobrist_key, depth, score, flag, best_move, age)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.model.UnvalidateMovesArray" [color="black", fontcolor="black", label=<{UnvalidateMovesArray|<br ALIGN="LEFT"/>|append(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.alpha_beta_Kopie.ZobristHashing" [color="black", fontcolor="black", label=<{ZobristHashing|zobrist_side<br ALIGN="LEFT"/>zobrist_table<br ALIGN="LEFT"/>|hash_position(bitboards)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.alpha_beta_Kopie.TranspositionTable" -> "src.alpha_beta_Kopie.AlphaBetaSearch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transposition_table", style="solid"];
"src.alpha_beta_Kopie.ZobristHashing" -> "src.alpha_beta_Kopie.AlphaBetaSearch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="zobrist", style="solid"];
"src.alt_eval.EvalFunction" -> "src.alpha_beta_Kopie.AlphaBetaSearch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="eval_func", style="solid"];
"src.alt_eval.EvalFunction" -> "src.alpha_beta_Kopie.AlphaBetaSearch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="eval_func_opponent", style="solid"];
"src.moveGenerator_sicher.MoveGenerator" -> "src.alpha_beta_Kopie.AlphaBetaSearch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="move_gen", style="solid"];
"src.moveGenerator_sicher.MoveGenerator" -> "src.mcts_uct.MCTS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_mv", style="solid"];
"src.model.Player" -> "src.mcts_uct.MCTS" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="player1", style="solid"];
}
